@using ActivityTracer.Models
@model AppActivity

<h2>Edit "@Model.Title" activity</h2>

<link rel="stylesheet" href="~/css/create_edit.css" />

<form action="edit" method="post" enctype="multipart/form-data" style="display: flex; flex-direction: column" class="activity-form">
	@Html.LabelFor(t => t.Title)
	@Html.EditorFor(t => t.Title)

	@Html.LabelFor(t => t.Description)
	@Html.EditorFor(t => t.Description)

	@Html.LabelFor(t => t.SelectedSport)
	@Html.DropDownListFor(t => t.SelectedSport, new SelectList(Enum.GetValues(typeof(Sports))), new {@class = "form-control"})

	@Html.LabelFor(t => t.Date)
	<input asp-for="Date" type="datetime-local" id="dt" name="Date" class="form-control" required />

	@Html.LabelFor(t => t.Time)
	<input asp-for="Time" type="time" id="appt" name="Time" min="00:00:00" max="23:59:59" class="form-control" required />

	@* List all the property that has a value and posses the "NullableProperty" attribute *@
	@foreach (var prop in Model.GetType().GetProperties().Where(t => t.GetValue(Model) is not null && Attribute.IsDefined(t, typeof(NullableProperty))))
	{
		var propName = prop.Name;
		var propValue = prop.GetValue(Model).ToString();
		<label>@propName</label>
		<input name="@propName" type="text" value="@propValue" />
	}

	@* list the data that is optional/not required to be filled in (nullable properties represents the optional datas)*@
	<select name="SelectProperty" id="PropertySelect" class="form-control">
		<option value="" disabled selected hidden>Add Data</option>
		@* List all the properties that still doesn't have a value and have the "NullableProperty" attribute' *@
		@foreach (var prop in Model.GetType().GetProperties().Where(t => t.GetValue(Model) is null && Attribute.IsDefined(t, typeof(NullableProperty))))
		{
			<option>@prop.Name</option>
		}
	</select>

	<div id="PropertyDiv" style="display: flex; flex-direction: column">
	</div>

	@* for the modelbinder, appActivity.Id *@
	@Html.HiddenFor(t => t.Id)

	@* Using AJAX (or a similar technology) is necessary to create a more user-friendly image editing experience  *@




	<a class="btn btn-danger" href="/Home/Delete?activityId=@Model.Id" style="margin-bottom:15px;">Delete Activity</a>

	<input type="submit" value="Update" />

</form>

<script>
	document.getElementById('PropertySelect').selectedIndex = 0; /* automatically select the first one, so the user cant select it */

	function addNewInput() {
		var selectElement = document.querySelector('select[name="SelectProperty"]');
		var selectedIndex = selectElement.selectedIndex;

		var selectedOption = selectElement.options[selectedIndex];
		var selectedValue = selectedOption.value;

		var input = document.createElement('input');
		var label = document.createElement('label');
		input.name = selectedValue; /* For the bindingModel */
		label.textContent = selectedValue;

		document.getElementById("PropertyDiv").appendChild(label);
		document.getElementById("PropertyDiv").appendChild(input);

		selectElement.remove(selectedIndex);

		document.getElementById('PropertySelect').selectedIndex = 0;
	}
	document.getElementById("PropertySelect").addEventListener("change", addNewInput);

</script>